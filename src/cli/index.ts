#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import inquirer from 'inquirer';
import fs from 'fs-extra';
import path from 'path';
import { JsonAdapter } from '../adapter/JsonAdapter';
import { DEFAULT_CONFIG } from '../config/defaults';
import { JsonAdapterConfig } from '../types';

const program = new Command();

program
  .name('payload-db-json')
  .description('CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Payload JSON Database Adapter')
  .version('1.0.0');

// –ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
program
  .command('init')
  .description('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å JSON –∞–¥–∞–ø—Ç–µ—Ä–æ–º')
  .option('-d, --dir <directory>', '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞', '.')
  .option('-t, --template <template>', '–®–∞–±–ª–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞', 'basic')
  .action(async (options) => {
    console.log(chalk.blue('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Payload –ø—Ä–æ–µ–∫—Ç–∞ —Å JSON –∞–¥–∞–ø—Ç–µ—Ä–æ–º...'));
    
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'projectName',
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:',
        default: path.basename(process.cwd()),
      },
      {
        type: 'list',
        name: 'template',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:',
        choices: [
          { name: '–ë–∞–∑–æ–≤—ã–π –±–ª–æ–≥', value: 'basic-blog' },
          { name: 'E-commerce', value: 'ecommerce' },
          { name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', value: 'portfolio' },
          { name: '–ü—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç', value: 'blank' },
        ],
        default: options.template,
      },
      {
        type: 'confirm',
        name: 'useEncryption',
        message: '–í–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö?',
        default: false,
      },
      {
        type: 'input',
        name: 'dataDir',
        message: '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö:',
        default: './data',
      },
    ]);

    await initializeProject(options.dir, answers);
  });

// –ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
program
  .command('migrate')
  .description('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥—Ä—É–≥–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
  .option('-f, --from <source>', '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (mongodb, postgres, mysql)')
  .option('-c, --config <config>', '–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
  .action(async (options) => {
    console.log(chalk.blue('üì¶ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...'));
    await runMigration(options);
  });

// –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
program
  .command('backup')
  .description('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
  .option('-o, --output <path>', '–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
  .option('-c, --compress', '–°–∂–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
  .action(async (options) => {
    console.log(chalk.blue('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...'));
    await createBackup(options);
  });

// –ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
program
  .command('restore')
  .description('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
  .option('-i, --input <path>', '–ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
  .option('-f, --force', '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ')
  .action(async (options) => {
    console.log(chalk.blue('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...'));
    await restoreBackup(options);
  });

// –ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
program
  .command('validate')
  .description('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö')
  .option('-d, --data-dir <path>', '–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö', './data')
  .option('--fix', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')
  .action(async (options) => {
    console.log(chalk.blue('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...'));
    await validateData(options);
  });

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
program
  .command('stats')
  .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
  .option('-d, --data-dir <path>', '–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö', './data')
  .option('-j, --json', '–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON')
  .action(async (options) => {
    await showStats(options);
  });

// –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
program
  .command('clear-cache')
  .description('–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞')
  .option('-d, --data-dir <path>', '–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö', './data')
  .action(async (options) => {
    console.log(chalk.blue('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...'));
    await clearCache(options);
  });

// –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥

async function initializeProject(dir: string, config: any) {
  try {
    const projectPath = path.resolve(dir);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    await fs.ensureDir(projectPath);
    await fs.ensureDir(path.join(projectPath, 'src'));
    await fs.ensureDir(path.join(projectPath, config.dataDir));
    await fs.ensureDir(path.join(projectPath, 'uploads'));
    
    // –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
    const templatePath = path.join(__dirname, '../../examples', config.template);
    if (await fs.pathExists(templatePath)) {
      await fs.copy(templatePath, projectPath, {
        filter: (src) => !src.includes('node_modules') && !src.includes('.git'),
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º package.json
    const packageJson = {
      name: config.projectName,
      version: '1.0.0',
      description: `Payload CMS project with JSON Database Adapter`,
      main: 'dist/server.js',
      scripts: {
        dev: 'cross-env NODE_ENV=development nodemon src/server.ts',
        build: 'tsc',
        start: 'cross-env NODE_ENV=production node dist/server.js',
        'generate:types': 'cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:types',
        'generate:graphQLSchema': 'cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:graphQLSchema',
      },
      dependencies: {
        payload: '^2.0.0',
        'payload-db-json': '^1.0.0',
        express: '^4.18.0',
        'cross-env': '^7.0.3',
      },
      devDependencies: {
        '@types/express': '^4.17.0',
        '@types/node': '^20.0.0',
        nodemon: '^3.0.0',
        'ts-node': '^10.9.0',
        typescript: '^5.0.0',
      },
    };
    
    await fs.writeJson(path.join(projectPath, 'package.json'), packageJson, { spaces: 2 });
    
    // –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    const envContent = `PAYLOAD_SECRET=${generateSecret()}
PORT=3000
JSON_DB_DATA_DIR=${config.dataDir}
JSON_DB_ENABLE_ENCRYPTION=${config.useEncryption}
${config.useEncryption ? `JSON_DB_ENCRYPTION_KEY=${generateEncryptionKey()}` : ''}`;
    
    await fs.writeFile(path.join(projectPath, '.env'), envContent);
    
    console.log(chalk.green('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!'));
    console.log(chalk.yellow('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:'));
    console.log(chalk.white('1. cd ' + config.projectName));
    console.log(chalk.white('2. npm install'));
    console.log(chalk.white('3. npm run dev'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:'), error);
    process.exit(1);
  }
}

async function runMigration(options: any) {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  console.log(chalk.yellow('‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö'));
}

async function createBackup(options: any) {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = options.output || `./backup-${timestamp}`;
    
    await fs.ensureDir(backupPath);
    await fs.copy('./data', path.join(backupPath, 'data'));
    await fs.copy('./uploads', path.join(backupPath, 'uploads'));
    
    if (options.compress) {
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è
      console.log(chalk.yellow('‚ö†Ô∏è  –°–∂–∞—Ç–∏–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö'));
    }
    
    console.log(chalk.green(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`));
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:'), error);
  }
}

async function restoreBackup(options: any) {
  try {
    if (!options.input) {
      console.error(chalk.red('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'));
      return;
    }
    
    if (!options.force) {
      const confirm = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'proceed',
          message: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
          default: false,
        },
      ]);
      
      if (!confirm.proceed) {
        console.log(chalk.yellow('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'));
        return;
      }
    }
    
    await fs.remove('./data');
    await fs.remove('./uploads');
    
    await fs.copy(path.join(options.input, 'data'), './data');
    await fs.copy(path.join(options.input, 'uploads'), './uploads');
    
    console.log(chalk.green('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'));
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:'), error);
  }
}

async function validateData(options: any) {
  try {
    const config: JsonAdapterConfig = {
      ...DEFAULT_CONFIG,
      dataDir: options.dataDir,
    };
    
    const adapter = new JsonAdapter(config);
    await adapter.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const collections = await fs.readdir(options.dataDir);
    let issues = 0;
    
    for (const collection of collections) {
      const collectionPath = path.join(options.dataDir, collection);
      const stat = await fs.stat(collectionPath);
      
      if (stat.isDirectory()) {
        console.log(chalk.blue(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collection}`));
        
        try {
          const files = await fs.readdir(collectionPath);
          for (const file of files) {
            if (file.endsWith('.json')) {
              const filePath = path.join(collectionPath, file);
              const content = await fs.readJson(filePath);
              
              // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON
              if (!content.id) {
                console.log(chalk.red(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≤ —Ñ–∞–π–ª–µ: ${file}`));
                issues++;
                
                if (options.fix) {
                  content.id = path.basename(file, '.json');
                  await fs.writeJson(filePath, content, { spaces: 2 });
                  console.log(chalk.green(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω ID`));
                }
              }
            }
          }
        } catch (error) {
          console.log(chalk.red(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${error}`));
          issues++;
        }
      }
    }
    
    if (issues === 0) {
      console.log(chalk.green('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues}`));
    }
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:'), error);
  }
}

async function showStats(options: any) {
  try {
    const config: JsonAdapterConfig = {
      ...DEFAULT_CONFIG,
      dataDir: options.dataDir,
    };
    
    const adapter = new JsonAdapter(config);
    await adapter.connect();
    
    const stats = await adapter.getStats();
    
    if (options.json) {
      console.log(JSON.stringify(stats, null, 2));
    } else {
      console.log(chalk.blue('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:'));
      console.log(chalk.white(`–ö–æ–ª–ª–µ–∫—Ü–∏–π: ${stats.collections}`));
      console.log(chalk.white(`–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.documents}`));
      console.log(chalk.white(`–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${formatBytes(stats.dataSize)}`));
      console.log(chalk.white(`–ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–π: ${stats.cacheHits}`));
      console.log(chalk.white(`–ö—ç—à –ø—Ä–æ–º–∞—Ö–æ–≤: ${stats.cacheMisses}`));
      console.log(chalk.white(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stats.lastModified}`));
    }
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:'), error);
  }
}

async function clearCache(options: any) {
  try {
    const cachePath = path.join(options.dataDir, '.cache');
    
    if (await fs.pathExists(cachePath)) {
      await fs.remove(cachePath);
      console.log(chalk.green('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω'));
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è  –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω'));
    }
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:'), error);
  }
}

// –£—Ç–∏–ª–∏—Ç—ã

function generateSecret(): string {
  return require('crypto').randomBytes(32).toString('hex');
}

function generateEncryptionKey(): string {
  return require('crypto').randomBytes(16).toString('hex');
}

function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

program.parse();

export default program;