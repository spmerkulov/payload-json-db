name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint
    
    - name: Build project
      run: npm run build
    
    - name: Run prepare release checks
      run: npm run prepare-release
    
    - name: Extract release notes
      id: extract-release-notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract release notes from CHANGELOG.md if exists
        if [ -f CHANGELOG.md ]; then
          # Get content between current version and previous version
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release-notes.md
        else
          echo "Release $VERSION" > release-notes.md
          echo "" >> release-notes.md
          echo "Automated release from tag $VERSION" >> release-notes.md
        fi
    
    - name: Publish to NPM
      run: npm publish --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: JSON Database Adapter ${{ steps.extract-release-notes.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
    
    - name: Upload build artifacts to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist
        asset_name: build-artifacts.zip
        asset_content_type: application/zip

  notify:
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
    - name: Notify success
      run: |
        echo "âœ… Release ${{ github.ref }} published successfully!"
        echo "ðŸ“¦ NPM: https://www.npmjs.com/package/@payload-json-db/adapter"
        echo "ðŸš€ GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"