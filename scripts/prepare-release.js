#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');

/**
 * –°–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–ª–∏–∑—É
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ NPM
 */

class ReleasePreparation {
  constructor() {
    this.projectRoot = path.resolve(__dirname, '..');
    this.errors = [];
    this.warnings = [];
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    switch (type) {
      case 'error':
        console.log(chalk.red(`[${timestamp}] ‚ùå ${message}`));
        break;
      case 'warning':
        console.log(chalk.yellow(`[${timestamp}] ‚ö†Ô∏è  ${message}`));
        break;
      case 'success':
        console.log(chalk.green(`[${timestamp}] ‚úÖ ${message}`));
        break;
      default:
        console.log(chalk.blue(`[${timestamp}] ‚ÑπÔ∏è  ${message}`));
    }
  }

  checkFile(filePath, required = true) {
    const fullPath = path.join(this.projectRoot, filePath);
    const exists = fs.existsSync(fullPath);
    
    if (exists) {
      this.log(`–§–∞–π–ª ${filePath} –Ω–∞–π–¥–µ–Ω`, 'success');
      return true;
    } else {
      const message = `–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
      if (required) {
        this.errors.push(message);
        this.log(message, 'error');
      } else {
        this.warnings.push(message);
        this.log(message, 'warning');
      }
      return false;
    }
  }

  checkPackageJson() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
    
    const packagePath = path.join(this.projectRoot, 'package.json');
    if (!this.checkFile('package.json')) {
      return false;
    }

    try {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = ['name', 'version', 'description', 'main', 'types', 'author', 'license'];
      for (const field of requiredFields) {
        if (!packageJson[field]) {
          this.errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ ${field} –≤ package.json`);
          this.log(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ ${field} –≤ package.json`, 'error');
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
      if (packageJson.version === '0.0.0' || packageJson.version === '1.0.0-dev') {
        this.warnings.push('–í–µ—Ä—Å–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ development –≤–µ—Ä—Å–∏—è');
        this.log('–í–µ—Ä—Å–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ development –≤–µ—Ä—Å–∏—è', 'warning');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      if (!packageJson.peerDependencies || !packageJson.peerDependencies.payload) {
        this.errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç peerDependency –Ω–∞ payload');
        this.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç peerDependency –Ω–∞ payload', 'error');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ files
      if (!packageJson.files || !packageJson.files.includes('dist')) {
        this.errors.push('–ü–æ–ª–µ files –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é');
        this.log('–ü–æ–ª–µ files –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', 'error');
      }

      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ package.json –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      return true;
    } catch (error) {
      this.errors.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
      this.log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`, 'error');
      return false;
    }
  }

  checkRequiredFiles() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const requiredFiles = [
      'README.md',
      'LICENSE',
      'CHANGELOG.md',
      'src/index.ts',
      'tsconfig.json'
    ];

    const optionalFiles = [
      'CONTRIBUTING.md',
      'CODE_OF_CONDUCT.md',
      'SECURITY.md',
      '.gitignore',
      '.github/workflows/ci.yml'
    ];

    requiredFiles.forEach(file => this.checkFile(file, true));
    optionalFiles.forEach(file => this.checkFile(file, false));
  }

  checkBuild() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const distPath = path.join(this.projectRoot, 'dist');
      if (!fs.existsSync(distPath)) {
        this.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É...');
        execSync('npm run build', { cwd: this.projectRoot, stdio: 'inherit' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ dist
      const distFiles = [
        'dist/index.js',
        'dist/index.d.ts',
        'dist/cli/index.js'
      ];

      distFiles.forEach(file => this.checkFile(file, true));
      
      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      return true;
    } catch (error) {
      this.errors.push(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`);
      this.log(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`, 'error');
      return false;
    }
  }

  checkTests() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...');
    
    try {
      execSync('npm test', { cwd: this.projectRoot, stdio: 'pipe' });
      this.log('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ', 'success');
      return true;
    } catch (error) {
      this.errors.push('–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
      this.log('–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏', 'error');
      return false;
    }
  }

  checkLinting() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞...');
    
    try {
      execSync('npm run lint', { cwd: this.projectRoot, stdio: 'pipe' });
      this.log('–õ–∏–Ω—Ç–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', 'success');
      return true;
    } catch (error) {
      this.warnings.push('–õ–∏–Ω—Ç–∏–Ω–≥ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã');
      this.log('–õ–∏–Ω—Ç–∏–Ω–≥ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã', 'warning');
      return false;
    }
  }

  checkGitStatus() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...');
    
    try {
      const status = execSync('git status --porcelain', { cwd: this.projectRoot, encoding: 'utf8' });
      
      if (status.trim()) {
        this.warnings.push('–ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
        this.log('–ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'warning');
        console.log(status);
        return false;
      } else {
        this.log('–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è', 'success');
        return true;
      }
    } catch (error) {
      this.warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git');
      this.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git', 'warning');
      return false;
    }
  }

  generateReleaseNotes() {
    this.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è release notes...');
    
    const packageJson = JSON.parse(fs.readFileSync(path.join(this.projectRoot, 'package.json'), 'utf8'));
    const version = packageJson.version;
    
    const releaseNotes = `# Release ${version}

## üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- JSON Database Adapter –¥–ª—è Payload CMS
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö AES-256-GCM
- –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å TTL
- CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
- TypeScript –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- Serverless –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å

## üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏
- Troubleshooting guide

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ê—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

---

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–º. [CHANGELOG.md](./CHANGELOG.md)
`;

    const releaseNotesPath = path.join(this.projectRoot, 'RELEASE_NOTES.md');
    fs.writeFileSync(releaseNotesPath, releaseNotes);
    
    this.log(`Release notes —Å–æ–∑–¥–∞–Ω—ã: ${releaseNotesPath}`, 'success');
  }

  async run() {
    console.log(chalk.bold.blue('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–ª–∏–∑—É payload-db-json\n'));
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.checkPackageJson();
    this.checkRequiredFiles();
    this.checkBuild();
    this.checkTests();
    this.checkLinting();
    this.checkGitStatus();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º release notes
    this.generateReleaseNotes();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n' + chalk.bold('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:'));
    
    if (this.errors.length > 0) {
      console.log(chalk.red.bold('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:'));
      this.errors.forEach(error => console.log(chalk.red(`  ‚Ä¢ ${error}`)));
    }
    
    if (this.warnings.length > 0) {
      console.log(chalk.yellow.bold('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:'));
      this.warnings.forEach(warning => console.log(chalk.yellow(`  ‚Ä¢ ${warning}`)));
    }
    
    if (this.errors.length === 0) {
      console.log(chalk.green.bold('\n‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!'));
      console.log(chalk.blue('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:'));
      console.log(chalk.blue('  1. npm login'));
      console.log(chalk.blue('  2. npm publish'));
      console.log(chalk.blue('  3. git tag v<version>'));
      console.log(chalk.blue('  4. git push --tags'));
      
      process.exit(0);
    } else {
      console.log(chalk.red.bold('\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π'));
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (require.main === module) {
  const preparation = new ReleasePreparation();
  preparation.run().catch(error => {
    console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–ª–∏–∑—É:'), error);
    process.exit(1);
  });
}

module.exports = ReleasePreparation;